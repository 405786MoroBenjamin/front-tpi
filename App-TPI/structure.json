{
  "src": {
    "app": {
      "users-components": {
        "users": {
          "users-new-user": {
            "new-user.component.ts": "import { CommonModule, formatDate } from '@angular/common';\r\nimport { Component, inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { RolModel } from '../../../users-models/users/Rol';\r\nimport { UserService } from '../../../users-servicies/user.service';\r\nimport { UserGet } from '../../../users-models/users/UserGet';\r\nimport { UserPost } from '../../../users-models/users/UserPost';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { UsersSelectMultipleComponent } from \"../../utils/users-select-multiple/users-select-multiple.component\";\r\nimport { DateService } from '../../../users-servicies/date.service';\r\nimport { AuthService } from '../../../users-servicies/auth.service';\r\nimport Swal from 'sweetalert2';\r\nimport { PlotService } from '../../../users-servicies/plot.service';\r\nimport { GetPlotDto } from '../../../users-models/plot/GetPlotDto';\r\nimport { ValidatorsService } from '../../../users-servicies/validators.service';\r\n\r\n@Component({\r\n  selector: 'app-new-user',\r\n  standalone: true,\r\n  imports: [FormsModule, CommonModule, ReactiveFormsModule, RouterModule, UsersSelectMultipleComponent],\r\n  templateUrl: './new-user.component.html',\r\n  styleUrl: './new-user.component.css'\r\n})\r\nexport class NewUserComponent implements OnInit {\r\n\r\n  constructor(private router:Router){\r\n    \r\n  }\r\n\r\n  private readonly apiService = inject(UserService);\r\n  private readonly authService = inject(AuthService);\r\n  private readonly plotService = inject(PlotService);\r\n  private readonly validatorService = inject(ValidatorsService);\r\n  @ViewChild(UsersSelectMultipleComponent) rolesComponent!: UsersSelectMultipleComponent;\r\n\r\n  rolesSelected : string[] = [];\r\n  roles: RolModel[] = [];\r\n  rolesHtmlString: string = '';  //\r\n  rolesString: string = \"Roles añadidos:\";\r\n  rolesInput: string[] = [];\r\n  select: string = \"\";\r\n  checkOption: boolean = false;\r\n  lotes: GetPlotDto[] = [];\r\n\r\n  subTitleLabel: string = 'Seleccione los roles del usuario';\r\n  optionsForOwner: string[] = [\"Familiar mayor\", \"Familiar menor\"];\r\n  options: any[] = [];\r\n  selectedOptions: string[] = [];\r\n  \r\n\r\n  ngOnInit() {\r\n    this.loadRoles();\r\n\r\n     //SOLO MUESTRA LOS LOTES DISPONIBLES\r\n     this.plotService.getAllPlotsAvailables().subscribe({\r\n      next: (data: GetPlotDto[]) => {\r\n          if(this.authService.getActualRole() == \"Propietario\"){\r\n              this.lotes = data.filter(lote => this.authService.getUser().plotId.includes(lote.id));\r\n              this.reactiveForm.get('plot')?.setValue(this.authService.getUser().plotId.toString());\r\n              this.reactiveForm.get('plot')?.disable();\r\n\r\n          }else{\r\n            this.lotes = data;\r\n          }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error al cargar los tipos de lote:', err);\r\n      }\r\n    });\r\n\r\n    if(this.authService.getActualRole() == \"Propietario\"){\r\n      this.reactiveForm.controls['plot'].disable();\r\n    }\r\n\r\n\r\n    this.apiService.getAllRoles().subscribe({\r\n      next: (data: RolModel[]) => {\r\n        this.options = data.map(rol => rol.description);\r\n        if(this.authService.getActualRole() == \"Propietario\"){\r\n          let optionsFilter = this.options.filter(rol => this.optionsForOwner.includes(rol));\r\n          this.options = [];\r\n          optionsFilter.forEach(o => this.options.push({value : o, name: o}))\r\n                    \r\n        } else{\r\n          let optionsFilter = this.options.filter(rol => !this.optionsForOwner.includes(rol) && rol != \"Propietario\" && rol != \"SuperAdmin\");\r\n          this.options = [];\r\n          optionsFilter.forEach(o => this.options.push({value : o, name: o}))\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar los roles:', error);\r\n      }\r\n    });\r\n\r\n    if(this.authService.getActualRole() == \"Gerente\"){\r\n      this.reactiveForm.get(\"plot\")?.disable();\r\n      this.reactiveForm.get(\"plot\")?.setValue(\"Sin lote\");\r\n    }\r\n  }\r\n\r\n\r\n  reactiveForm = new FormGroup({\r\n    name: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(1),\r\n        Validators.maxLength(50)\r\n    ]),\r\n    lastname: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(1),\r\n        Validators.maxLength(50)\r\n    ]),\r\n    username: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(1),\r\n        Validators.maxLength(30)\r\n      ],\r\n        this.validatorService.validateUniqueUsername()\r\n    ),\r\n    password: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(6),\r\n      Validators.maxLength(30)\r\n  ]),\r\n    email: new FormControl('', [\r\n        Validators.required,\r\n        Validators.email\r\n      ],\r\n        this.validatorService.validateUniqueEmail()\r\n    ),\r\n    phone_number: new FormControl('', [\r\n        Validators.required,\r\n        Validators.pattern(/^\\d+$/),\r\n        Validators.minLength(10),\r\n        Validators.maxLength(20)\r\n    ]),\r\n    dniType: new FormControl('', [\r\n      Validators.required\r\n      \r\n    ]),\r\n    dni: new FormControl('', [\r\n        Validators.required,\r\n        Validators.pattern(/^\\d+$/),\r\n        Validators.minLength(8)\r\n      ],\r\n        this.validatorService.validateUniqueDni()\r\n    ),\r\n    telegram_id: new FormControl(0,[\r\n        Validators.required,\r\n        Validators.min(0),\r\n        Validators.minLength(1),\r\n        Validators.maxLength(9)\r\n    ]),\r\n    active: new FormControl(true), \r\n    datebirth: new FormControl(DateService.formatDate(new Date(\"2000-01-02\")), [Validators.required]),\r\n    roles: new FormControl(''),\r\n    plot: new FormControl('', [Validators.required]),\r\n    userUpdateId: new FormControl(this.authService.getUser().id)\r\n  });\r\n  \r\n  //Carga los roles\r\n  loadRoles() {\r\n    this.apiService.getAllRoles().subscribe({\r\n      next: (data: RolModel[]) => {\r\n\r\n        this.roles = data;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar los roles:', error);\r\n        \r\n      }\r\n    });\r\n  }\r\n  \r\n  //Redirige a la ruta especificada \r\n  redirect(){\r\n    if(this.authService.getActualRole() == \"Propietario\"){\r\n      this.router.navigate(['/home/family']);\r\n    }else{\r\n      this.router.navigate(['/home/users/list']);\r\n    }\r\n  }\r\n\r\n  //Resetear formularios\r\n  resetForm() {\r\n    this.reactiveForm.reset();\r\n    this.rolesInput = [];\r\n  }\r\n\r\n\r\n  //Añade los roles seleccionados por users-select-multiple\r\n  fillOptionsSelected(options: any) {\r\n    this.selectedOptions = options;  // Asignamos directamente los roles emitidos\r\n  }\r\n\r\nverifyOptions() {\r\n    if(this.selectedOptions.length === 0){  \r\n      this.checkOption = false;\r\n    }\r\n    else{\r\n      this.checkOption = true;\r\n    }\r\n  }\r\n  \r\n\r\n  //Se crea el usuario\r\n  createUser() {\r\n    \r\n    const fechaValue = this.reactiveForm.get('datebirth')?.value;\r\n    \r\n    const userData : UserPost = {\r\n      name: this.reactiveForm.get('name')?.value || '',\r\n      lastname: this.reactiveForm.get('lastname')?.value || '',\r\n      username: this.reactiveForm.get('username')?.value || '',\r\n      password: this.reactiveForm.get('password')?.value?.toString() || '',\r\n      email: this.reactiveForm.get('email')?.value || '',\r\n      dni_type_id: Number(this.reactiveForm.get('dniType')?.value) || 0,\r\n      dni: this.reactiveForm.get('dni')?.value?.toString() || \"\",\r\n      active: true,\r\n      avatar_url: \"asd\",\r\n      datebirth: fechaValue ? new Date(fechaValue).toISOString().split('T')[0] : '',\r\n      roles: this.selectedOptions,\r\n      phone_number: this.reactiveForm.get('phone_number')?.value?.toString() || '',\r\n      userUpdateId: this.reactiveForm.get('userUpdateId')?.value || 0,\r\n      telegram_id: this.reactiveForm.get('telegram_id')?.value || 0\r\n    \r\n    };\r\n\r\n    console.log(userData);\r\n    \r\n\r\n    //Si el usuario es de tipo owner se setea el plotId\r\n    if(this.authService.getActualRole() == \"Propietario\"){\r\n      userData.plot_id = this.authService.getUser().plotId[0];  \r\n    }else{\r\n      userData.plot_id = 0;\r\n    }\r\n\r\n    console.log(userData);\r\n    \r\n    \r\n\r\n    this.apiService.postUser(userData).subscribe({\r\n      next: (response) => {\r\n        //Mostramos que la operación fue exitosa\r\n        (window as any).Swal.fire({\r\n          position: \"center-center\",\r\n          title: 'Usuario creado',\r\n          text: 'El usuario se ha creado correctamente',\r\n          icon: 'success',\r\n          timer: 1000,\r\n          showConfirmButton: false\r\n        });\r\n        if(this.authService.getActualRole() == \"Propietario\"){\r\n          this.router.navigate(['/home/family']);\r\n        }\r\n        //Reseteamos el formulario\r\n        this.reactiveForm.reset();\r\n        this.rolesComponent.emptyList();\r\n        \r\n      },\r\n      error: (error) => {\r\n        //Mostramos que hubo un error\r\n        (window as any).Swal.fire({\r\n          position: \"center-center\",\r\n          title: 'Error',\r\n          text: 'El usuario no se pudo crear',\r\n          icon: 'error',\r\n          confirmButtonText: 'Aceptar',\r\n          \r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  //Retorna una clase para poner el input en verde o rojo dependiendo si esta validado\r\n  onValidate(controlName: string) {\r\n    const control = this.reactiveForm.get(controlName);\r\n    return {\r\n      'is-invalid': control?.invalid && (control?.dirty || control?.touched),\r\n      'is-valid': control?.valid\r\n    }\r\n  }\r\n\r\n\r\n  showError(controlName: string): string {\r\n    const control = this.reactiveForm.get(controlName);\r\n  \r\n    if (control && control.errors) {\r\n      const [errorKey] = Object.keys(control.errors);\r\n  \r\n      switch (errorKey) {\r\n        case 'required':\r\n          return 'Este campo no puede estar vacío.';\r\n        case 'email':\r\n          return 'Formato de correo electrónico inválido.';\r\n        case 'minlength':\r\n          return `El valor ingresado es demasiado corto. Mínimo ${control.errors['minlength'].requiredLength} caracteres.`;\r\n        case 'maxlength':\r\n          return `El valor ingresado es demasiado largo. Máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n        case 'min':\r\n          return `El valor es menor que el mínimo permitido (${control.errors['min'].min}).`;\r\n        case 'pattern':\r\n          return 'El formato ingresado no es válido.';\r\n        case 'requiredTrue':\r\n          return 'Debe aceptar el campo requerido para continuar.';\r\n        case 'date':\r\n          return 'La fecha ingresada es inválida.';\r\n        case 'usernameTaken':\r\n          return 'Este nombre de usuario ya está en uso.';\r\n        case 'emailTaken':\r\n          return 'Este correo electrónico ya está en uso.';\r\n        case 'dniTaken':\r\n          return 'Este DNI ya está en uso.';\r\n        default:\r\n          return 'Error no identificado en el campo.';\r\n      }\r\n    }\r\n  \r\n    // Retorna cadena vacía si no hay errores.\r\n    return '';\r\n  }\r\n}"
          }
        }
      }
    }
  }
}